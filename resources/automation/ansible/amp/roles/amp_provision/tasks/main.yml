---

# Plagarized (and modified for this course) from:  https://github.com/nmasse-itix/OpenShift-Lab/tree/master/roles/3scale
# Thank you nmasse-itix !
#
# Use this ansible play for this course only.
# Afterwards, leverage (and contribute to) the original ansible playbook created by nmasse-itix.


################            AMP Project and Template            #####################
- name: Get a list of existing projects
  command: oc get projects -o name
  register: oc_get_projects
  changed_when: false
  tags: project

- name: Create a new project for 3scale  {{ threescale_project }}
  command: oc new-project "{{ threescale_project }}"
  when: '"projects/" ~ threescale_project not in oc_get_projects.stdout_lines'
  tags: project
  ignore_errors: yes

- name: Download {{ threescale_template }}
  get_url:
    url: "{{ threescale_template }}"
    dest: "{{modified_template_path}}"
    force: yes
  tags: template

- name: Process the OpenShift Template and create the OpenShift objects for the 3scale API Management Platform
  shell: oc process -f "{{ modified_template_path }}" -p "MASTER_NAME={{OCP_PROJECT_PREFIX}}-master"   -p "TENANT_NAME={{ threescale_tenant_name }}" -p "WILDCARD_DOMAIN={{ threescale_wildcard_domain }}" -p "ADMIN_PASSWORD={{ amp_admin_passwd }}" -n "{{ threescale_project }}" | oc create -f - -n "{{ threescale_project }}"
  register: oc
  failed_when: oc.rc > 0 and 'Error from server (AlreadyExists):' not in oc.stderr
  changed_when: oc.rc == 0
  tags: template
  ignore_errors: yes
- include: status.yml






#########################           AMP Storage Tier        #####################################
- include: wait_for.yml
  static: no
  vars:
    pod_to_wait:
      - backend-redis
      - system-memcache
      - system-mysql
      - system-redis
      - zync-database
  tags: status

- include: wait_for.yml
  static: no
 
  vars:
    pod_to_wait:
      - backend-listener
      - backend-worker
  tags: status







#########################           AMP System Tier        #####################################


- include: wait_for.yml
  static: no
  vars:
    pod_to_wait:
      - system-app
  tags: status


- include: wait_for.yml
  static: no
  vars:
    pod_to_wait:
      - system-resque
      - system-sidekiq
      - backend-cron
      - system-sphinx
  tags: status



#################     Gateway Tier      #####################

- name: Setting debug log level for both production and staging apicast
  command: oc patch dc/apicast-staging --patch '{"spec":{"template":{"spec":{"containers":[{"name":"apicast-staging", "env":[{"name":"APICAST_LOG_LEVEL","value":"debug" }] }]}}}}'
  tags: setup
  ignore_errors: yes
- command: oc patch dc/apicast-production --patch '{"spec":{"template":{"spec":{"containers":[{"name":"apicast-production", "env":[{"name":"APICAST_LOG_LEVEL","value":"debug" }] }]}}}}'
  tags: setup
  ignore_errors: yes
- command: oc patch dc/apicast-production --patch '{"spec":{"template":{"spec":{"containers":[{"name":"apicast-production", "env":[{"name":"APICAST_CONFIGURATION_LOADER","value":"lazy" }] }]}}}}'
  tags: setup
  ignore_errors: yes





#####################           Routes          #################################

- include: status.yml
  static: no



- name: Replace generic stage apicast routes with new routes whose name is more specific to our backend service
  command: oc create route edge {{ item }} --service=apicast-staging --hostname="{{ vertx_stage_route.hostname }}" -n "{{ threescale_project }}"
  with_items: 
    - "{{ vertx_stage_route.routename }}"
  tags: amp_rollout

- name: Replace generic prod apicast routes with new routes whose name is more specific to our backend service
  command: oc create route edge {{ item }} --service=apicast-production --hostname="{{ vertx_prod_route.hostname }}" -n "{{ threescale_project }}"
  with_items: 
    - "{{ vertx_prod_route.routename }}"
  tags: amp_rollout






########################            3Scale State        ##################################

- name: Get Admin Username
  command: oc get dc system-app -n "{{ threescale_project }}" -o 'jsonpath={.spec.template.spec.containers[0].env[?(@.name=="USER_LOGIN")].value}'
  register: username
  changed_when: false
  tags: status

- name: Get Admin Password
  command: oc get dc system-app -n "{{ threescale_project }}" -o 'jsonpath={.spec.template.spec.containers[0].env[?(@.name=="USER_PASSWORD")].value}'
  register: password
  changed_when: false
  tags: status

- name: Get Admin ACCESS TOKEN
  command: oc get dc system-app -n "{{ threescale_project }}" -o 'jsonpath={.spec.template.spec.containers[0].env[?(@.name=="ADMIN_ACCESS_TOKEN")].value}'
  register: ON_PREM_ACCESS_TOKEN
  changed_when: false
  tags: status

- name: 3scale is ready !
  debug: msg="Login on https://{{ threescale_tenant_name }}-admin.{{ threescale_wildcard_domain }} with username = '{{ username.stdout }}' and password = '{{ password.stdout }} and admin access token = '{{ ON_PREM_ACCESS_TOKEN.stdout }}' '"
  tags: status
